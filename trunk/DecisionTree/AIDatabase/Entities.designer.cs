#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AIDT.AIDatabase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="AIProject")]
	public partial class EntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClassArrangement(ClassArrangement instance);
    partial void UpdateClassArrangement(ClassArrangement instance);
    partial void DeleteClassArrangement(ClassArrangement instance);
    partial void InsertOccupationType(OccupationType instance);
    partial void UpdateOccupationType(OccupationType instance);
    partial void DeleteOccupationType(OccupationType instance);
    partial void InsertClassDetail(ClassDetail instance);
    partial void UpdateClassDetail(ClassDetail instance);
    partial void DeleteClassDetail(ClassDetail instance);
    partial void InsertClassTime(ClassTime instance);
    partial void UpdateClassTime(ClassTime instance);
    partial void DeleteClassTime(ClassTime instance);
    partial void InsertCourseCertificate(CourseCertificate instance);
    partial void UpdateCourseCertificate(CourseCertificate instance);
    partial void DeleteCourseCertificate(CourseCertificate instance);
    partial void InsertCourseDetail(CourseDetail instance);
    partial void UpdateCourseDetail(CourseDetail instance);
    partial void DeleteCourseDetail(CourseDetail instance);
    partial void InsertCourseGroup(CourseGroup instance);
    partial void UpdateCourseGroup(CourseGroup instance);
    partial void DeleteCourseGroup(CourseGroup instance);
    partial void InsertCustomerDetail(CustomerDetail instance);
    partial void UpdateCustomerDetail(CustomerDetail instance);
    partial void DeleteCustomerDetail(CustomerDetail instance);
    partial void InsertTeacherDetail(TeacherDetail instance);
    partial void UpdateTeacherDetail(TeacherDetail instance);
    partial void DeleteTeacherDetail(TeacherDetail instance);
    #endregion
		
		public EntitiesDataContext() : 
				base(global::AIDT.AIDatabase.Properties.Settings.Default.AIProjectConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ClassArrangement> ClassArrangements
		{
			get
			{
				return this.GetTable<ClassArrangement>();
			}
		}
		
		public System.Data.Linq.Table<OccupationType> OccupationTypes
		{
			get
			{
				return this.GetTable<OccupationType>();
			}
		}
		
		public System.Data.Linq.Table<ClassDetail> ClassDetails
		{
			get
			{
				return this.GetTable<ClassDetail>();
			}
		}
		
		public System.Data.Linq.Table<ClassTime> ClassTimes
		{
			get
			{
				return this.GetTable<ClassTime>();
			}
		}
		
		public System.Data.Linq.Table<CourseCertificate> CourseCertificates
		{
			get
			{
				return this.GetTable<CourseCertificate>();
			}
		}
		
		public System.Data.Linq.Table<CourseDetail> CourseDetails
		{
			get
			{
				return this.GetTable<CourseDetail>();
			}
		}
		
		public System.Data.Linq.Table<CourseGroup> CourseGroups
		{
			get
			{
				return this.GetTable<CourseGroup>();
			}
		}
		
		public System.Data.Linq.Table<CustomerDetail> CustomerDetails
		{
			get
			{
				return this.GetTable<CustomerDetail>();
			}
		}
		
		public System.Data.Linq.Table<TeacherDetail> TeacherDetails
		{
			get
			{
				return this.GetTable<TeacherDetail>();
			}
		}
	}
	
	[Table(Name="dbo.ClassArrangement")]
	public partial class ClassArrangement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerId;
		
		private int _ClassId;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<ClassDetail> _ClassDetail;
		
		private EntityRef<CustomerDetail> _CustomerDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public ClassArrangement()
		{
			this._ClassDetail = default(EntityRef<ClassDetail>);
			this._CustomerDetail = default(EntityRef<CustomerDetail>);
			OnCreated();
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._CustomerDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClassId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._ClassDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Association(Name="ClassDetail_ClassArrangement", Storage="_ClassDetail", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public ClassDetail ClassDetail
		{
			get
			{
				return this._ClassDetail.Entity;
			}
			set
			{
				ClassDetail previousValue = this._ClassDetail.Entity;
				if (((previousValue != value) 
							|| (this._ClassDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassDetail.Entity = null;
						previousValue.ClassArrangements.Remove(this);
					}
					this._ClassDetail.Entity = value;
					if ((value != null))
					{
						value.ClassArrangements.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("ClassDetail");
				}
			}
		}
		
		[Association(Name="CustomerDetail_ClassArrangement", Storage="_CustomerDetail", ThisKey="CustomerId", OtherKey="CustomerId", IsForeignKey=true)]
		public CustomerDetail CustomerDetail
		{
			get
			{
				return this._CustomerDetail.Entity;
			}
			set
			{
				CustomerDetail previousValue = this._CustomerDetail.Entity;
				if (((previousValue != value) 
							|| (this._CustomerDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerDetail.Entity = null;
						previousValue.ClassArrangements.Remove(this);
					}
					this._CustomerDetail.Entity = value;
					if ((value != null))
					{
						value.ClassArrangements.Add(this);
						this._CustomerId = value.CustomerId;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("CustomerDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OccupationType")]
	public partial class OccupationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OccupationTypeId;
		
		private string _OccupationName;
		
		private string _Note;
		
		private EntitySet<CustomerDetail> _CustomerDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOccupationTypeIdChanging(int value);
    partial void OnOccupationTypeIdChanged();
    partial void OnOccupationNameChanging(string value);
    partial void OnOccupationNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public OccupationType()
		{
			this._CustomerDetails = new EntitySet<CustomerDetail>(new Action<CustomerDetail>(this.attach_CustomerDetails), new Action<CustomerDetail>(this.detach_CustomerDetails));
			OnCreated();
		}
		
		[Column(Storage="_OccupationTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OccupationTypeId
		{
			get
			{
				return this._OccupationTypeId;
			}
			set
			{
				if ((this._OccupationTypeId != value))
				{
					this.OnOccupationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OccupationTypeId = value;
					this.SendPropertyChanged("OccupationTypeId");
					this.OnOccupationTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_OccupationName", DbType="NVarChar(50)")]
		public string OccupationName
		{
			get
			{
				return this._OccupationName;
			}
			set
			{
				if ((this._OccupationName != value))
				{
					this.OnOccupationNameChanging(value);
					this.SendPropertyChanging();
					this._OccupationName = value;
					this.SendPropertyChanged("OccupationName");
					this.OnOccupationNameChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(1024)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="OccupationType_CustomerDetail", Storage="_CustomerDetails", ThisKey="OccupationTypeId", OtherKey="OccupationTypeId")]
		public EntitySet<CustomerDetail> CustomerDetails
		{
			get
			{
				return this._CustomerDetails;
			}
			set
			{
				this._CustomerDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerDetails(CustomerDetail entity)
		{
			this.SendPropertyChanging();
			entity.OccupationType = this;
		}
		
		private void detach_CustomerDetails(CustomerDetail entity)
		{
			this.SendPropertyChanging();
			entity.OccupationType = null;
		}
	}
	
	[Table(Name="dbo.ClassDetails")]
	public partial class ClassDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private string _ClassName;
		
		private System.Nullable<int> _ClassTime;
		
		private System.Nullable<int> _CourseId;
		
		private System.Nullable<int> _TeacherId;
		
		private EntitySet<ClassArrangement> _ClassArrangements;
		
		private EntityRef<ClassTime> _ClassTime1;
		
		private EntityRef<CourseDetail> _CourseDetail;
		
		private EntityRef<TeacherDetail> _TeacherDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnClassTimeChanging(System.Nullable<int> value);
    partial void OnClassTimeChanged();
    partial void OnCourseIdChanging(System.Nullable<int> value);
    partial void OnCourseIdChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    #endregion
		
		public ClassDetail()
		{
			this._ClassArrangements = new EntitySet<ClassArrangement>(new Action<ClassArrangement>(this.attach_ClassArrangements), new Action<ClassArrangement>(this.detach_ClassArrangements));
			this._ClassTime1 = default(EntityRef<ClassTime>);
			this._CourseDetail = default(EntityRef<CourseDetail>);
			this._TeacherDetail = default(EntityRef<TeacherDetail>);
			OnCreated();
		}
		
		[Column(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClassName", DbType="NVarChar(50)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[Column(Storage="_ClassTime", DbType="Int")]
		public System.Nullable<int> ClassTime
		{
			get
			{
				return this._ClassTime;
			}
			set
			{
				if ((this._ClassTime != value))
				{
					if (this._ClassTime1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassTimeChanging(value);
					this.SendPropertyChanging();
					this._ClassTime = value;
					this.SendPropertyChanged("ClassTime");
					this.OnClassTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CourseId", DbType="Int")]
		public System.Nullable<int> CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._CourseDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._TeacherDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[Association(Name="ClassDetail_ClassArrangement", Storage="_ClassArrangements", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<ClassArrangement> ClassArrangements
		{
			get
			{
				return this._ClassArrangements;
			}
			set
			{
				this._ClassArrangements.Assign(value);
			}
		}
		
		[Association(Name="ClassTime_ClassDetail", Storage="_ClassTime1", ThisKey="ClassTime", OtherKey="ClassTimeId", IsForeignKey=true)]
		public ClassTime ClassTime1
		{
			get
			{
				return this._ClassTime1.Entity;
			}
			set
			{
				ClassTime previousValue = this._ClassTime1.Entity;
				if (((previousValue != value) 
							|| (this._ClassTime1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassTime1.Entity = null;
						previousValue.ClassDetails.Remove(this);
					}
					this._ClassTime1.Entity = value;
					if ((value != null))
					{
						value.ClassDetails.Add(this);
						this._ClassTime = value.ClassTimeId;
					}
					else
					{
						this._ClassTime = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClassTime1");
				}
			}
		}
		
		[Association(Name="CourseDetail_ClassDetail", Storage="_CourseDetail", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public CourseDetail CourseDetail
		{
			get
			{
				return this._CourseDetail.Entity;
			}
			set
			{
				CourseDetail previousValue = this._CourseDetail.Entity;
				if (((previousValue != value) 
							|| (this._CourseDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseDetail.Entity = null;
						previousValue.ClassDetails.Remove(this);
					}
					this._CourseDetail.Entity = value;
					if ((value != null))
					{
						value.ClassDetails.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseDetail");
				}
			}
		}
		
		[Association(Name="TeacherDetail_ClassDetail", Storage="_TeacherDetail", ThisKey="TeacherId", OtherKey="TeacherId", IsForeignKey=true)]
		public TeacherDetail TeacherDetail
		{
			get
			{
				return this._TeacherDetail.Entity;
			}
			set
			{
				TeacherDetail previousValue = this._TeacherDetail.Entity;
				if (((previousValue != value) 
							|| (this._TeacherDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeacherDetail.Entity = null;
						previousValue.ClassDetails.Remove(this);
					}
					this._TeacherDetail.Entity = value;
					if ((value != null))
					{
						value.ClassDetails.Add(this);
						this._TeacherId = value.TeacherId;
					}
					else
					{
						this._TeacherId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeacherDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassArrangements(ClassArrangement entity)
		{
			this.SendPropertyChanging();
			entity.ClassDetail = this;
		}
		
		private void detach_ClassArrangements(ClassArrangement entity)
		{
			this.SendPropertyChanging();
			entity.ClassDetail = null;
		}
	}
	
	[Table(Name="dbo.ClassTime")]
	public partial class ClassTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassTimeId;
		
		private string _TimeName;
		
		private string _Note;
		
		private EntitySet<ClassDetail> _ClassDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassTimeIdChanging(int value);
    partial void OnClassTimeIdChanged();
    partial void OnTimeNameChanging(string value);
    partial void OnTimeNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public ClassTime()
		{
			this._ClassDetails = new EntitySet<ClassDetail>(new Action<ClassDetail>(this.attach_ClassDetails), new Action<ClassDetail>(this.detach_ClassDetails));
			OnCreated();
		}
		
		[Column(Storage="_ClassTimeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassTimeId
		{
			get
			{
				return this._ClassTimeId;
			}
			set
			{
				if ((this._ClassTimeId != value))
				{
					this.OnClassTimeIdChanging(value);
					this.SendPropertyChanging();
					this._ClassTimeId = value;
					this.SendPropertyChanged("ClassTimeId");
					this.OnClassTimeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TimeName", DbType="NVarChar(50)")]
		public string TimeName
		{
			get
			{
				return this._TimeName;
			}
			set
			{
				if ((this._TimeName != value))
				{
					this.OnTimeNameChanging(value);
					this.SendPropertyChanging();
					this._TimeName = value;
					this.SendPropertyChanged("TimeName");
					this.OnTimeNameChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(1024)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="ClassTime_ClassDetail", Storage="_ClassDetails", ThisKey="ClassTimeId", OtherKey="ClassTime")]
		public EntitySet<ClassDetail> ClassDetails
		{
			get
			{
				return this._ClassDetails;
			}
			set
			{
				this._ClassDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassDetails(ClassDetail entity)
		{
			this.SendPropertyChanging();
			entity.ClassTime1 = this;
		}
		
		private void detach_ClassDetails(ClassDetail entity)
		{
			this.SendPropertyChanging();
			entity.ClassTime1 = null;
		}
	}
	
	[Table(Name="dbo.CourseCertificate")]
	public partial class CourseCertificate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CertificateId;
		
		private string _CertificateName;
		
		private EntitySet<CourseDetail> _CourseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCertificateIdChanging(int value);
    partial void OnCertificateIdChanged();
    partial void OnCertificateNameChanging(string value);
    partial void OnCertificateNameChanged();
    #endregion
		
		public CourseCertificate()
		{
			this._CourseDetails = new EntitySet<CourseDetail>(new Action<CourseDetail>(this.attach_CourseDetails), new Action<CourseDetail>(this.detach_CourseDetails));
			OnCreated();
		}
		
		[Column(Storage="_CertificateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CertificateId
		{
			get
			{
				return this._CertificateId;
			}
			set
			{
				if ((this._CertificateId != value))
				{
					this.OnCertificateIdChanging(value);
					this.SendPropertyChanging();
					this._CertificateId = value;
					this.SendPropertyChanged("CertificateId");
					this.OnCertificateIdChanged();
				}
			}
		}
		
		[Column(Storage="_CertificateName", DbType="NVarChar(50)")]
		public string CertificateName
		{
			get
			{
				return this._CertificateName;
			}
			set
			{
				if ((this._CertificateName != value))
				{
					this.OnCertificateNameChanging(value);
					this.SendPropertyChanging();
					this._CertificateName = value;
					this.SendPropertyChanged("CertificateName");
					this.OnCertificateNameChanged();
				}
			}
		}
		
		[Association(Name="CourseCertificate_CourseDetail", Storage="_CourseDetails", ThisKey="CertificateId", OtherKey="CourseCertificate")]
		public EntitySet<CourseDetail> CourseDetails
		{
			get
			{
				return this._CourseDetails;
			}
			set
			{
				this._CourseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseDetails(CourseDetail entity)
		{
			this.SendPropertyChanging();
			entity.CourseCertificate1 = this;
		}
		
		private void detach_CourseDetails(CourseDetail entity)
		{
			this.SendPropertyChanging();
			entity.CourseCertificate1 = null;
		}
	}
	
	[Table(Name="dbo.CourseDetails")]
	public partial class CourseDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private string _CourseName;
		
		private System.Nullable<int> _CourseCertificate;
		
		private System.Nullable<double> _CourseFee;
		
		private System.Nullable<int> _CourseGroup;
		
		private EntitySet<ClassDetail> _ClassDetails;
		
		private EntityRef<CourseCertificate> _CourseCertificate1;
		
		private EntityRef<CourseGroup> _CourseGroup1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    partial void OnCourseCertificateChanging(System.Nullable<int> value);
    partial void OnCourseCertificateChanged();
    partial void OnCourseFeeChanging(System.Nullable<double> value);
    partial void OnCourseFeeChanged();
    partial void OnCourseGroupChanging(System.Nullable<int> value);
    partial void OnCourseGroupChanged();
    #endregion
		
		public CourseDetail()
		{
			this._ClassDetails = new EntitySet<ClassDetail>(new Action<ClassDetail>(this.attach_ClassDetails), new Action<ClassDetail>(this.detach_ClassDetails));
			this._CourseCertificate1 = default(EntityRef<CourseCertificate>);
			this._CourseGroup1 = default(EntityRef<CourseGroup>);
			OnCreated();
		}
		
		[Column(Storage="_CourseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[Column(Storage="_CourseName", DbType="NVarChar(50)")]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[Column(Storage="_CourseCertificate", DbType="Int")]
		public System.Nullable<int> CourseCertificate
		{
			get
			{
				return this._CourseCertificate;
			}
			set
			{
				if ((this._CourseCertificate != value))
				{
					if (this._CourseCertificate1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseCertificateChanging(value);
					this.SendPropertyChanging();
					this._CourseCertificate = value;
					this.SendPropertyChanged("CourseCertificate");
					this.OnCourseCertificateChanged();
				}
			}
		}
		
		[Column(Storage="_CourseFee", DbType="Float")]
		public System.Nullable<double> CourseFee
		{
			get
			{
				return this._CourseFee;
			}
			set
			{
				if ((this._CourseFee != value))
				{
					this.OnCourseFeeChanging(value);
					this.SendPropertyChanging();
					this._CourseFee = value;
					this.SendPropertyChanged("CourseFee");
					this.OnCourseFeeChanged();
				}
			}
		}
		
		[Column(Storage="_CourseGroup", DbType="Int")]
		public System.Nullable<int> CourseGroup
		{
			get
			{
				return this._CourseGroup;
			}
			set
			{
				if ((this._CourseGroup != value))
				{
					if (this._CourseGroup1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseGroupChanging(value);
					this.SendPropertyChanging();
					this._CourseGroup = value;
					this.SendPropertyChanged("CourseGroup");
					this.OnCourseGroupChanged();
				}
			}
		}
		
		[Association(Name="CourseDetail_ClassDetail", Storage="_ClassDetails", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<ClassDetail> ClassDetails
		{
			get
			{
				return this._ClassDetails;
			}
			set
			{
				this._ClassDetails.Assign(value);
			}
		}
		
		[Association(Name="CourseCertificate_CourseDetail", Storage="_CourseCertificate1", ThisKey="CourseCertificate", OtherKey="CertificateId", IsForeignKey=true)]
		public CourseCertificate CourseCertificate1
		{
			get
			{
				return this._CourseCertificate1.Entity;
			}
			set
			{
				CourseCertificate previousValue = this._CourseCertificate1.Entity;
				if (((previousValue != value) 
							|| (this._CourseCertificate1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseCertificate1.Entity = null;
						previousValue.CourseDetails.Remove(this);
					}
					this._CourseCertificate1.Entity = value;
					if ((value != null))
					{
						value.CourseDetails.Add(this);
						this._CourseCertificate = value.CertificateId;
					}
					else
					{
						this._CourseCertificate = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseCertificate1");
				}
			}
		}
		
		[Association(Name="CourseGroup_CourseDetail", Storage="_CourseGroup1", ThisKey="CourseGroup", OtherKey="CourseGroupId", IsForeignKey=true)]
		public CourseGroup CourseGroup1
		{
			get
			{
				return this._CourseGroup1.Entity;
			}
			set
			{
				CourseGroup previousValue = this._CourseGroup1.Entity;
				if (((previousValue != value) 
							|| (this._CourseGroup1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseGroup1.Entity = null;
						previousValue.CourseDetails.Remove(this);
					}
					this._CourseGroup1.Entity = value;
					if ((value != null))
					{
						value.CourseDetails.Add(this);
						this._CourseGroup = value.CourseGroupId;
					}
					else
					{
						this._CourseGroup = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseGroup1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassDetails(ClassDetail entity)
		{
			this.SendPropertyChanging();
			entity.CourseDetail = this;
		}
		
		private void detach_ClassDetails(ClassDetail entity)
		{
			this.SendPropertyChanging();
			entity.CourseDetail = null;
		}
	}
	
	[Table(Name="dbo.CourseGroup")]
	public partial class CourseGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseGroupId;
		
		private string _Name;
		
		private string _Note;
		
		private EntitySet<CourseDetail> _CourseDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseGroupIdChanging(int value);
    partial void OnCourseGroupIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public CourseGroup()
		{
			this._CourseDetails = new EntitySet<CourseDetail>(new Action<CourseDetail>(this.attach_CourseDetails), new Action<CourseDetail>(this.detach_CourseDetails));
			OnCreated();
		}
		
		[Column(Storage="_CourseGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseGroupId
		{
			get
			{
				return this._CourseGroupId;
			}
			set
			{
				if ((this._CourseGroupId != value))
				{
					this.OnCourseGroupIdChanging(value);
					this.SendPropertyChanging();
					this._CourseGroupId = value;
					this.SendPropertyChanged("CourseGroupId");
					this.OnCourseGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(1024)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="CourseGroup_CourseDetail", Storage="_CourseDetails", ThisKey="CourseGroupId", OtherKey="CourseGroup")]
		public EntitySet<CourseDetail> CourseDetails
		{
			get
			{
				return this._CourseDetails;
			}
			set
			{
				this._CourseDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseDetails(CourseDetail entity)
		{
			this.SendPropertyChanging();
			entity.CourseGroup1 = this;
		}
		
		private void detach_CourseDetails(CourseDetail entity)
		{
			this.SendPropertyChanging();
			entity.CourseGroup1 = null;
		}
	}
	
	[Table(Name="dbo.CustomerDetails")]
	public partial class CustomerDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<int> _OccupationTypeId;
		
		private EntitySet<ClassArrangement> _ClassArrangements;
		
		private EntityRef<OccupationType> _OccupationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnOccupationTypeIdChanging(System.Nullable<int> value);
    partial void OnOccupationTypeIdChanged();
    #endregion
		
		public CustomerDetail()
		{
			this._ClassArrangements = new EntitySet<ClassArrangement>(new Action<ClassArrangement>(this.attach_ClassArrangements), new Action<ClassArrangement>(this.detach_ClassArrangements));
			this._OccupationType = default(EntityRef<OccupationType>);
			OnCreated();
		}
		
		[Column(Storage="_CustomerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_OccupationTypeId", DbType="Int")]
		public System.Nullable<int> OccupationTypeId
		{
			get
			{
				return this._OccupationTypeId;
			}
			set
			{
				if ((this._OccupationTypeId != value))
				{
					if (this._OccupationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOccupationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OccupationTypeId = value;
					this.SendPropertyChanged("OccupationTypeId");
					this.OnOccupationTypeIdChanged();
				}
			}
		}
		
		[Association(Name="CustomerDetail_ClassArrangement", Storage="_ClassArrangements", ThisKey="CustomerId", OtherKey="CustomerId")]
		public EntitySet<ClassArrangement> ClassArrangements
		{
			get
			{
				return this._ClassArrangements;
			}
			set
			{
				this._ClassArrangements.Assign(value);
			}
		}
		
		[Association(Name="OccupationType_CustomerDetail", Storage="_OccupationType", ThisKey="OccupationTypeId", OtherKey="OccupationTypeId", IsForeignKey=true)]
		public OccupationType OccupationType
		{
			get
			{
				return this._OccupationType.Entity;
			}
			set
			{
				OccupationType previousValue = this._OccupationType.Entity;
				if (((previousValue != value) 
							|| (this._OccupationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OccupationType.Entity = null;
						previousValue.CustomerDetails.Remove(this);
					}
					this._OccupationType.Entity = value;
					if ((value != null))
					{
						value.CustomerDetails.Add(this);
						this._OccupationTypeId = value.OccupationTypeId;
					}
					else
					{
						this._OccupationTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("OccupationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassArrangements(ClassArrangement entity)
		{
			this.SendPropertyChanging();
			entity.CustomerDetail = this;
		}
		
		private void detach_ClassArrangements(ClassArrangement entity)
		{
			this.SendPropertyChanging();
			entity.CustomerDetail = null;
		}
	}
	
	[Table(Name="dbo.TeacherDetails")]
	public partial class TeacherDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeacherId;
		
		private string _TeacherName;
		
		private System.Nullable<int> _TeacherCertificate;
		
		private string _Note;
		
		private EntitySet<ClassDetail> _ClassDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnTeacherNameChanging(string value);
    partial void OnTeacherNameChanged();
    partial void OnTeacherCertificateChanging(System.Nullable<int> value);
    partial void OnTeacherCertificateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public TeacherDetail()
		{
			this._ClassDetails = new EntitySet<ClassDetail>(new Action<ClassDetail>(this.attach_ClassDetails), new Action<ClassDetail>(this.detach_ClassDetails));
			OnCreated();
		}
		
		[Column(Storage="_TeacherId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherName", DbType="NVarChar(50)")]
		public string TeacherName
		{
			get
			{
				return this._TeacherName;
			}
			set
			{
				if ((this._TeacherName != value))
				{
					this.OnTeacherNameChanging(value);
					this.SendPropertyChanging();
					this._TeacherName = value;
					this.SendPropertyChanged("TeacherName");
					this.OnTeacherNameChanged();
				}
			}
		}
		
		[Column(Storage="_TeacherCertificate", DbType="Int")]
		public System.Nullable<int> TeacherCertificate
		{
			get
			{
				return this._TeacherCertificate;
			}
			set
			{
				if ((this._TeacherCertificate != value))
				{
					this.OnTeacherCertificateChanging(value);
					this.SendPropertyChanging();
					this._TeacherCertificate = value;
					this.SendPropertyChanged("TeacherCertificate");
					this.OnTeacherCertificateChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(1024)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="TeacherDetail_ClassDetail", Storage="_ClassDetails", ThisKey="TeacherId", OtherKey="TeacherId")]
		public EntitySet<ClassDetail> ClassDetails
		{
			get
			{
				return this._ClassDetails;
			}
			set
			{
				this._ClassDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassDetails(ClassDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeacherDetail = this;
		}
		
		private void detach_ClassDetails(ClassDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeacherDetail = null;
		}
	}
}
#pragma warning restore 1591
